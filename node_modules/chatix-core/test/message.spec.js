const Message = require('../src/js/message').default;
const expect = require('chai').expect;


describe('Message', () => {
    
    it('constructs text message from api response', () => {
        let apiMessage = {
            uuid: "test-uuid",
            type: 0,
            content: "test message content",
            sender_flag: 1,
            sender_id: "test sender id",
            sent_at: 1566808647
        };

        let message = Message.buildFromInfo(apiMessage);
        expect(message).to.have.property('uuid', "test-uuid");
        expect(message).to.have.property('type', Message.TYPE_TEXT);
        expect(message).to.have.property('content', "test message content");
        expect(message).to.have.property('sender_flag', 1);
        expect(message).to.have.property('sender_id', "test sender id");
        expect(message).to.have.property('sent_at');
        expect(message.sent_at).to.be.eql(new Date(1566808647 * 1000));
    });

    it('constructs file message from api response', () => {
        let apiMessage = {
            uuid: "test-uuid",
            type: 5,
            content: "",
            file_url: "test file URL",
            sender_flag: 1,
            sender_id: "test sender id",
            sent_at: 1566808647
        };

        let message = Message.buildFromInfo(apiMessage);
        expect(message).to.have.property('uuid', "test-uuid");
        expect(message).to.have.property('type', Message.TYPE_FILE);
        expect(message).to.have.property('file_url', "test file URL");
        expect(message).to.have.property('sender_flag', 1);
        expect(message).to.have.property('sent_at');
        expect(message.sent_at).to.be.eql(new Date(1566808647 * 1000));
    });

    it('constructs image message from api response', () => {
        let apiMessage = {
            uuid: "test-uuid",
            type: 4,
            content: "",
            thumb_100_url: "test thumb 100 image URL",
            thumb_300_url: "test thimb 300 image URL",
            original_url: "test original image URL",
            sender_flag: 1,
            sender_id: "test sender id",
            sent_at: 1566808647
        };

        let message = Message.buildFromInfo(apiMessage);
        expect(message).to.have.property('uuid', "test-uuid");
        expect(message).to.have.property('type', Message.TYPE_IMG);
        expect(message).to.have.property('thumb_100_url', "test thumb 100 image URL");
        expect(message).to.have.property('thumb_300_url', "test thimb 300 image URL");
        expect(message).to.have.property('original_url', "test original image URL");
        expect(message).to.have.property('sender_flag', 1);
        expect(message).to.have.property('sent_at');
        expect(message.sent_at).to.be.eql(new Date(1566808647 * 1000));
    });
    
    it('constructs fallback text message from api response when it has unkown type', () => {
        let apiMessage = {
            uuid: "test-uuid",
            type: 999999,
            content: "",
            sender_flag: 1,
            sender_id: "test sender id",
            sent_at: 1566808647
        };

        let message = Message.buildFromInfo(apiMessage);
        expect(message).to.have.property('uuid', "test-uuid");
        expect(message).to.have.property('type', Message.TYPE_TEXT);
        expect(message).to.have.property('content', "(Message has unknown type)");
        expect(message).to.have.property('sender_flag', 1);
        expect(message).to.have.property('sender_id', "test sender id");
        expect(message).to.have.property('sent_at');
        expect(message.sent_at).to.be.eql(new Date(1566808647 * 1000));
    })

    it('constructs text message', () => {
        let message = Message.buildText('test message');
        expect(message).to.have.property('type', Message.TYPE_TEXT, 'Invalid message type');
        expect(message).to.have.property('content', 'test message', 'Invalid content');
    });
    
    it('constructs file message', () => {
        let message = Message.buildFile({fileUrl: 'test url'});
        expect(message).to.have.property('type', Message.TYPE_FILE, 'Invalid message type');
        expect(message).to.have.property('file_url', 'test url', 'Invalid file url');
        expect(message).to.have.property('content', '', 'Content has to be empty string');
    });

    it('constructs image message', () => {
        let message = Message.buildImg({thumb300Url: '300', thumb100Url: '100', fileUrl: 'original'});
        expect(message).to.have.property('type', Message.TYPE_IMG, 'Invalid message type');
        expect(message).to.have.property('thumb_300_url', '300', 'Invalid thumb 300 url');
        expect(message).to.have.property('thumb_100_url', '100', 'Invalid thumb 100 url');
        expect(message).to.have.property('original_url', 'original', 'Invalid original url');
        expect(message).to.have.property('content', '', 'Content has to be empty string');
    });

});