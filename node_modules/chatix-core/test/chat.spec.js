const Chat = require('../src/js/chat').default;
const Connection = require("../src/js/connection").default;
const Visitor = require('../src/js/visitor').default;
const Message = require('../src/js/message').default;
const Manager = require('../src/js/manager').default;
const expect = require('chai').expect;

describe('Chat', () => {
    const TestWebsiteId = 'd4913f83-e3a8-484d-be1b-c64ffe248592';
    const TestVisitorId = '2e1ac56a-9871-4c2e-8637-a4e0261bdcca';
    it('should construct without passed visitorId', () => {
        let chat = new Chat(TestWebsiteId);
        expect(chat.visitor).has.to.be.instanceOf(Visitor);
        expect(chat.visitor.uuid).has.to.be.null;
        expect(chat.messages).has.to.be.instanceOf(Array);
        expect(chat.messages).has.to.be.empty;
        expect(chat.managers).has.to.be.instanceOf(Array);
        expect(chat.managers).has.to.be.empty;
        expect(chat.connection).has.to.be.instanceOf(Connection);
    });

    it('should construct with passed visitorId', ()=>{
        const fakeVisitorId = "testVisitorId"
        let chat = new Chat(TestWebsiteId, fakeVisitorId);
        expect(chat.visitor.uuid).has.to.be.eq(fakeVisitorId);
    });


    it('should start connection with correct visitor id', async () => {
        let chat = new Chat(TestWebsiteId, TestVisitorId);
        let connectionSuccess = await chat.startConnection();
        expect(connectionSuccess).to.be.true;
        expect(chat.visitor.getUuid()).has.to.be.eq(TestVisitorId);
    });

    it('should fail to start connection with invalid visitor ID', async () => {
        let fakeVisitorId = 'fakeId'
        let chat = new Chat(TestWebsiteId, fakeVisitorId);
        let connectionSuccess = await chat.startConnection();
        expect(connectionSuccess).to.be.false;
    });

    it('sends text message', async () => {
        let testText = 'test text';
        let chat = new Chat(TestWebsiteId, TestVisitorId);
        await chat.startConnection();
        let message = await chat.sendTextMessage(testText);
        expect(message).to.be.instanceOf(Message);
        expect(message.content).to.be.eq(testText);
        
    });

    it('gets manager from API by id', async () => {
        let managerId = '9beb512f-5ba9-4359-910e-53e6c0477647';
        let chat = new Chat(TestWebsiteId, TestVisitorId);
        await chat.startConnection();
        let manager = await chat.getManagerInfo(managerId);
        expect(manager).to.be.instanceOf(Manager);
        expect(manager.getUuid()).to.be.eq(managerId);
    });

    it('gets dialog history without passing params', async () => {
        let chat = new Chat(TestWebsiteId, TestVisitorId);
        await chat.startConnection();
        let history = await chat.getHistory();
        expect(history, 'returned history is not an array').to.be.instanceOf(Array);
        for (let m of history) {
            expect(m, 'found wrong object in history array').to.be.instanceOf(Message);
        }
    });

    it('get messages with passed params', async () => {
        let chat = new Chat(TestWebsiteId, TestVisitorId);
        await chat.startConnection();
        let historyPage = chat.sortMessages(await chat.getHistory());
        let firstOrigItem = historyPage.pop();
        let secondPage = await chat.getHistory(firstOrigItem.uuid, 1);
        expect(secondPage).to.be.instanceOf(Array);
        expect(secondPage.length).to.be.eq(1);
        expect(secondPage[0].uuid).to.be.equal(historyPage.pop().uuid);
    });
});