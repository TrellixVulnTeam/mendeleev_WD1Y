const Visitor = require('../src/js/visitor').default;
const User = require('../src/js/user').default;
const expect = require('chai').expect;

describe('Visitor', () => {

    let responseObj = {
        uuid: "testUUID",
        email: "email@example.com",
        name: "Test Name",
        isOnline: true,
        fields: {
            field1: "val1",
            field2: "val2",
        }
    };

    it('should construct object based on server response object', () => {
        let actual = Visitor.buildFromInfo(responseObj);

        expect(actual).to.haveOwnProperty('uuid', responseObj.uuid);
        expect(actual).to.haveOwnProperty('email', responseObj.email);
        expect(actual).to.haveOwnProperty('name', responseObj.name);
        expect(actual).to.haveOwnProperty('isOnline', responseObj.isOnline);
    });

    it('should get fields with getter', () => {
        let actual = Visitor.buildFromInfo(responseObj);

        expect(actual.fields).to.be.instanceOf(Object);
        expect(actual.fields).equal(responseObj.fields);
    });

    it('should set fields with setter and valid data', () => {
        let actual = new Visitor();
        let fields = {
            field1: "val1",
            field2: "val2"
        };
        expect(() => actual.setFields(fields)).has.to.not.throw();
    });

    it('should throw error if setter receives non flat object', () => {
        let actual = new Visitor();
        let fields = {
            field1: "val1",
            field2: {
                internal_field: "internal val"
            },
        };
        expect(() => actual.setFields(fields)).has.to.throw();
    });

    it('should throw error if setter receives object with array inside', () => {
        let actual = new Visitor();
        let fields = {
            field1: "val1",
            field2: [1, 2, 3],
        };
        expect(() => actual.setFields(fields)).has.to.throw();
    });

    it('returns fields with getter', () => {
        let actual = new Visitor();
        let fields = {
            field1: "val1",
            field2: "val2",
        };
        actual.fields = fields;
        expect(actual.getFields()).to.be.equal(fields);
    });

    it('inherits User class', () => {
        let actual = Visitor.buildFromInfo(responseObj);
        
        expect(actual).has.to.be.instanceOf(User);
    });

});