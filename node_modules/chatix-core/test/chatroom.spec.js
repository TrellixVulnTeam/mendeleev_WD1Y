const Chatroom = require('../src/js/chatroom').default;
const Manager = require('../src/js/manager').default;
const expect = require('chai').expect;

describe("Chatroom", () => {

    it('should bild from api response object', () => {
        let apiObject = {
            id: "test-chatroom-id",
            title: "Test chatroom title",
            is_private: false,
            number_of_visitors: 999,
            managers: [
                {
                    uuid: "testUUID",
                    email: "email@example.com",
                    name: "Test Name",
                    avatarUrl: "Test avatar url"
                },
                {
                    uuid: "testUUID",
                    email: "email@example.com",
                    name: "Test Name",
                    avatarUrl: "Test avatar url"
                }
            ]
        };

        let chatroom = Chatroom.buildFromInfo(apiObject);
        expect(chatroom).has.property('id', apiObject.id);
        expect(chatroom).has.property('title', apiObject.title);
        expect(chatroom).has.property('isPrivate', apiObject.is_private);
        expect(chatroom).has.property('numberOfVisitors', apiObject.number_of_visitors);
        expect(chatroom).has.property('managers');
        expect(chatroom.managers).to.be.a('array');
        expect(chatroom.managers.length).to.be.eq(apiObject.managers.length);
        for (const m of chatroom.managers) {
            expect(m).to.be.instanceOf(Manager);
        }
    });


    it('should set correct id with setter', () => {
        let chatroom = new Chatroom();
        chatroom.setId("test Id");
        expect(chatroom.id).to.be.eq("test Id");
    });
    
    it('should get correct id with getter', () => {
        let chatroom = new Chatroom();
        chatroom.id = "test Id";
        expect(chatroom.getId()).to.be.eq("test Id");
    });

    it('should set correct title with setter', () => {
        let chatroom = new Chatroom();
        chatroom.setTitle("test title");
        expect(chatroom.title).to.be.eq("test title");
    });
    
    it('should get correct title with getter', () => {
        let chatroom = new Chatroom();
        chatroom.title = "test title";
        expect(chatroom.getTitle()).to.be.eq("test title");
    });

    it('should set correct private flag with setter', () => {
        let chatroom = new Chatroom();
        chatroom.setIsPrivate(true);
        expect(chatroom.isPrivate).to.be.true;
        chatroom.setIsPrivate(false);
        expect(chatroom.isPrivate).to.be.false;
    });
    
    it('should get correct private flag with getter', () => {
        let chatroom = new Chatroom();
        chatroom.isPrivate = true;
        expect(chatroom.getIsPrivate()).to.be.true;
        chatroom.isPrivate = false;
        expect(chatroom.getIsPrivate()).to.be.false;
    });

    it('should set correct number of visitors with setter', () => {
        let chatroom = new Chatroom();
        chatroom.setNumberOfVisitors(10);
        expect(chatroom.numberOfVisitors).to.be.eq(10);
    });
    
    it('should get correct number of visitors with getter', () => {
        let chatroom = new Chatroom();
        chatroom.numberOfVisitors = 10;
        expect(chatroom.getNumberOfVisitors()).to.be.eq(10);
    });

    it('should get correct total number of users with getter', () => {
        let chatroom = new Chatroom();
        chatroom.numberOfVisitors = 10;
        expect(chatroom.getTotalNumberOfUsers()).to.be.eq(10);
        chatroom.managers.push(new Manager());
        expect(chatroom.getTotalNumberOfUsers()).to.be.eq(11);
        chatroom.numberOfVisitors = 0;
        expect(chatroom.getTotalNumberOfUsers()).to.be.eq(1);
        chatroom.managers.pop();
        expect(chatroom.getTotalNumberOfUsers()).to.be.eq(0);        
    });

    it('should set correct managers with setter', () => {
        let chatroom = new Chatroom();
        let managersArray = [];
        managersArray.push(new Manager());
        managersArray.push(new Manager());
        chatroom.setManagers(managersArray);
        expect(chatroom.managers).to.be.eq(managersArray);
    });
    
    it('should get correct managers with getter', () => {
        let chatroom = new Chatroom();
        let managersArray = [];
        managersArray.push(new Manager());
        managersArray.push(new Manager());
        chatroom.managers = managersArray;
        expect(chatroom.getManagers()).to.be.eq(managersArray);
    });
});