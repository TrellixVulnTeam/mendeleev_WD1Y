const ChatixCore = require('../src/js/chatixcore').default;
const expect = require('chai').expect;

describe('ChatixCore', () => {

    const TestWebsiteId = 'd4913f83-e3a8-484d-be1b-c64ffe248592';
    const TestVisitorId = '2e1ac56a-9871-4c2e-8637-a4e0261bdcca';
    it('should construct without passed visitorId', () => {
        mockObjects();
        let core = new ChatixCore(TestWebsiteId);
        expect(core).to.have.property('chat');
        expect(core).to.have.property('onConnected');
        expect(core).to.have.property('onDisconnected');
        expect(core).to.have.property('onManagerConnectedToConversation');
        expect(core).to.have.property('onManagerDisconnectedFromConversation');
        expect(core).to.have.property('onConversationMessageReceived');
        expect(core).to.have.property('onConversationMessageUpdated');
        expect(core).to.have.property('onConversationMessageDeleted');
        expect(core).to.have.property('onChatroomMessageReceived');
        expect(core).to.have.property('onChatroomMessageUpdated');
        expect(core).to.have.property('onChatroomMessageDeleted');
        expect(core).to.have.property('onVisitorConnectedToChatroom');
        expect(core).to.have.property('onManagerConnectedToChatroom');
        expect(core).to.have.property('onVisitorDisconnectedFromChatroom');
        expect(core).to.have.property('onManagerDisconnectedFromChatroom');
        expect(core).to.have.property('onScreencastPermissionRequested');
        expect(core).to.have.property('onManagerConnectedToScreencast');
        expect(core).to.have.property('onManagerDisconnectedFromScreencast');
    });

    it('should call onConnection callback', async () => {
        let core = new ChatixCore(TestWebsiteId, TestVisitorId);
        let isCallbackCalled = false;
        core.onConnected = () => { console.log("DONE"); isCallbackCalled = true; }
        let startResult = await core.start(); 
        if (startResult) {
            expect(isCallbackCalled).to.be.true;
        } else {
            expect.fail("It failed to start");
        }
    });

    


    function mockObjects() {
        global.location = {
            search: '?utm_source=test_src&utm_medium=test_mdm&utm_campaign=test_cmpn&utm_content=test_content&utm_term=text_term',
        };
        global.window = {
            navigator: {
                languages: ['en', 'ru', 'de']
            }
        }
    }
});