{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\admin\\\\Desktop\\\\mendeleev-practice-project\\\\src\\\\component\\\\form\\\\hookForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport SignupSchema from './yup';\nimport axios from 'axios';\nimport { get } from 'lodash';\nimport { Form } from \"formik\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst HookForm = () => {\n  _s();\n\n  const [emailInputVal, setEmailInputVal] = useState(\"\");\n  const [passwordInputVal, setPasswordInputVal] = useState(\"\");\n  const [isSubmitting, setSubmittingStatus] = useState(false);\n  const [errorBack, setErrorBack] = useState();\n  const field = get(errorBack, 'field');\n  const message = get(errorBack, 'message');\n  const {\n    register,\n    handleSubmit,\n    formState: {\n      errors\n    }\n  } = useForm({\n    resolver: yupResolver(SignupSchema)\n  });\n\n  const submitHandler = e => {\n    setErrorBack(null);\n    e.preventDefault();\n\n    if (isSubmitting) {\n      return;\n    }\n\n    setSubmittingStatus(true);\n    axios.post('http://localhost:8000/auth/signUp', {\n      email: emailInputVal,\n      password: passwordInputVal\n    }).then(res => {\n      setSubmittingStatus(false);\n      setErrorBack(null);\n    }).catch(err => {\n      setErrorBack(get(err, 'response.status'));\n      setSubmittingStatus(false);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit(data => console.log(data)) && submitHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"input\", { ...register(\"email\"),\n      required: true,\n      onChange: e => setEmailInputVal(e.target.value),\n      placeholder: \"Email\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this), errors.email && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: errors.email.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 24\n    }, this), field === 'email' && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 29\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", { ...register(\"password\"),\n      required: true,\n      onChange: e => setPasswordInputVal(e.target.value),\n      placeholder: \"Password\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }, this), errors.password && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: errors.password.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 27\n    }, this), field === 'password' && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 32\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n\n_s(HookForm, \"e27edvJL4VonwG2r1YxkV0gF2/k=\", false, function () {\n  return [useForm];\n});\n\n_c = HookForm;\nexport default HookForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"HookForm\");","map":{"version":3,"sources":["C:/Users/admin/Desktop/mendeleev-practice-project/src/component/form/hookForm.js"],"names":["React","useState","useForm","yupResolver","SignupSchema","axios","get","Form","HookForm","emailInputVal","setEmailInputVal","passwordInputVal","setPasswordInputVal","isSubmitting","setSubmittingStatus","errorBack","setErrorBack","field","message","register","handleSubmit","formState","errors","resolver","submitHandler","e","preventDefault","post","email","password","then","res","catch","err","data","console","log","target","value"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport { useForm } from 'react-hook-form'\nimport { yupResolver } from '@hookform/resolvers/yup'\n\nimport SignupSchema from './yup'\nimport axios from 'axios'\nimport { get } from 'lodash'\nimport {Form} from \"formik\";\n\nconst HookForm = () => {\n  const [emailInputVal, setEmailInputVal] = useState(\"\");\n  const [passwordInputVal, setPasswordInputVal] = useState(\"\");\n  const [isSubmitting, setSubmittingStatus] = useState(false)\n  const [errorBack, setErrorBack] = useState()\n\n  const field = get(errorBack, 'field')\n  const message = get(errorBack, 'message')\n\n  const {\n    register,\n    handleSubmit,\n    formState: {errors}} = useForm({\n    resolver: yupResolver(SignupSchema),\n  })\n  const submitHandler = (e) => {\n    setErrorBack(null)\n    e.preventDefault()\n    if (isSubmitting) {\n      return\n    }\n    setSubmittingStatus(true);\n    axios\n      .post('http://localhost:8000/auth/signUp', {email: emailInputVal, password: passwordInputVal})\n      .then((res) => {\n        setSubmittingStatus(false)\n        setErrorBack(null)\n      })\n      .catch((err) => {\n        setErrorBack(get(err, 'response.status'))\n        setSubmittingStatus(false)\n      })\n  }\n\n  return (\n    <form\n      onSubmit={handleSubmit(data => console.log(data)) && submitHandler}>\n      <input\n        {...register(\"email\")}\n        required\n        onChange={(e) => setEmailInputVal(e.target.value)}\n        placeholder=\"Email\"\n      /><br />\n      {errors.email && <div>{errors.email.message}</div>}\n      {field === 'email' && <div>{message}</div>}\n      <input\n        {...register(\"password\")}\n        required\n        onChange={(e) => setPasswordInputVal(e.target.value)}\n        placeholder=\"Password\"\n      /><br />\n      {errors.password && <div>{errors.password.message}</div>}\n      {field === 'password' && <div>{message}</div>}\n      <input type=\"submit\" />\n    </form>\n  )\n}\n\nexport default HookForm\n"]},"metadata":{},"sourceType":"module"}